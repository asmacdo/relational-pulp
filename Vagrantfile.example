# -*- mode: ruby -*-
# vi: set ft=ruby :

VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
 config.vm.box = "fedora/23-cloud-base"
 config.vm.synced_folder "..", "/home/vagrant/devel", type: "nfs", nfs_version: 4, nfs_udp: false
 # Comment out if you don't want Vagrant to add and remove entries from /etc/hosts for each VM.
 # requires the vagrant-hostmanager plugin to be installed
 # if Vagrant.has_plugin?("vagrant-hostmanager")
 #     config.hostmanager.enabled = true
 #     config.hostmanager.manage_host = true
 # end

 # bootstrap and run with ansible
 config.vm.provision "ansible" do |ansible|
     ansible.playbook = "./provision/vagrant.yml"
 end

 # Create the "dev" box
 config.vm.define "relpulp" do |dev|
    dev.vm.host_name = "relpulp.example.com"

    dev.vm.provider :libvirt do |domain|
        domain.cpus = 4
        domain.graphics_type = "spice"
        domain.memory = 2048
        domain.video_type = "qxl"

        # Uncomment this to expand the disk to the given size, in GB (default is usually 40)
        # You'll also need to uncomment the provisioning step below that resizes the root partition
        # do not set this to a size smaller than the base box, or you will be very sad
        # domain.machine_virtual_size = 80

        # Uncomment the following line if you would like to enable libvirt's unsafe cache
        # mode. It is called unsafe for a reason, as it causes the virtual host to ignore all
        # fsync() calls from the guest. Only do this if you are comfortable with the possibility of
        # your development guest becoming corrupted (in which case you should only need to do a
        # vagrant destroy and vagrant up to get a new one).
        #
        # domain.volume_cache = "unsafe"
    end

 end
end
